#!/usr/bin/env node

/**
 * Module dependencies.
 */

const socket = require('socket.io');


var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var Chat = require('../models/chatZone');
var uctrl = require('../controller/appController');
var cctrl = require('../controller/chatController');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


//socket
let io = socket(server);

//Socket Configuration
io.on('connection', (socket) => {

  console.log("new user connected");

  socket.on('join', function (data) {

    socket.join(data.room, () => {
      Chat.findOneAndUpdate({ chatRoom: data.room }, {})
        .then(room => {
          if (room == null)
            Chat.create({ chatRoom: data.room })
              .then(room => {
                console.log("chat room created succesfuly");
              })
        })
    });

  })
  socket.on('goOnline', function (id) {
    console.log(id);
    uctrl.goOnline(id, socket.id);
    socket.broadcast.emit("changeUserStatus", { id: id, status: true });
  });

  socket.on('goOffline', function (id) {
    console.log(id);
    uctrl.goOffline(socket.id);
    console.log(socket.id)
    socket.broadcast.emit("changeUserStatus", { id: id, status: false });
  });

  socket.on('disconnect', function () {
    console.log("disconnect");
  });

  socket.on('message', (data) => {
    cctrl.sendMessage(data, io, socket);
  });
  socket.on('file', (data) => {
    cctrl.sendfile(data, io, socket);
  });
});




/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


